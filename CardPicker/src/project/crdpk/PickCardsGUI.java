/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project.crdpk;

import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Kevin
 */
public class PickCardsGUI extends javax.swing.JFrame
{

    //Creates a player to store data, and initializes it as a singleton
    static Player player = new Player();

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: PickCardsGUI
     * @Title: PickCardsGUI
     *
     * @Description: Default constructor for GUI.
     *
     * @Input: n/a
     * @Output: new form
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: loadSpinner(); loads the spinner with player information
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public PickCardsGUI()
    {
        //Initializes all components
        initComponents();
        //centers form
        this.setLocationRelativeTo(null);
        //set default button
        this.getRootPane().setDefaultButton(goJButton);
        //set icon
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src//CardImages//b2fh.png"));
        //Adds players to the spinner
        loadSpinner();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        modeJbuttonGroup = new javax.swing.ButtonGroup();
        bgJPanel = new javax.swing.JPanel();
        cardGroupJPanel = new javax.swing.JPanel();
        card1JLabel = new javax.swing.JLabel();
        card2JLabel = new javax.swing.JLabel();
        card3JLabel = new javax.swing.JLabel();
        card4JLabel = new javax.swing.JLabel();
        dataJLabel = new javax.swing.JLabel();
        drawsJLabel = new javax.swing.JLabel();
        controlsJPanel = new javax.swing.JPanel();
        goJButton = new javax.swing.JButton();
        printJButton = new javax.swing.JButton();
        saveJButton = new javax.swing.JButton();
        homeJButton = new javax.swing.JButton();
        playerJLabel = new javax.swing.JLabel();
        playersJComboBox = new javax.swing.JComboBox<>();
        mainJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        playerJMenuItem = new javax.swing.JMenuItem();
        saveJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator = new javax.swing.JPopupMenu.Separator();
        quitJMenuItem = new javax.swing.JMenuItem();
        actionsJMenu = new javax.swing.JMenu();
        goJMenuItem = new javax.swing.JMenuItem();
        actions_topJSeparator = new javax.swing.JPopupMenu.Separator();
        logJMenuItem = new javax.swing.JMenuItem();
        statsJMenuItem = new javax.swing.JMenuItem();
        printStatsJMenuItem = new javax.swing.JMenuItem();
        actions_bottomJSeparator = new javax.swing.JPopupMenu.Separator();
        clearJMenuItem = new javax.swing.JMenuItem();
        settingsJMenu = new javax.swing.JMenu();
        keepJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        removeJRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        helpJMenu = new javax.swing.JMenu();
        instructionsJMenuItem = new javax.swing.JMenuItem();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cards Collection");
        setResizable(false);

        bgJPanel.setBackground(new java.awt.Color(0, 0, 0));

        cardGroupJPanel.setBackground(new java.awt.Color(0, 0, 0));
        cardGroupJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Successful Cards:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(255, 0, 51))); // NOI18N
        cardGroupJPanel.setForeground(new java.awt.Color(255, 0, 51));
        cardGroupJPanel.setToolTipText("Winning Suites");

        card1JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CardImages/b2fv.png"))); // NOI18N
        card1JLabel.setToolTipText("Card 1");

        card2JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CardImages/b2fv.png"))); // NOI18N
        card2JLabel.setToolTipText("Card 2");

        card3JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CardImages/b2fv.png"))); // NOI18N
        card3JLabel.setToolTipText("Card 3");

        card4JLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CardImages/b2fv.png"))); // NOI18N
        card4JLabel.setToolTipText("Card 4");

        javax.swing.GroupLayout cardGroupJPanelLayout = new javax.swing.GroupLayout(cardGroupJPanel);
        cardGroupJPanel.setLayout(cardGroupJPanelLayout);
        cardGroupJPanelLayout.setHorizontalGroup(
            cardGroupJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardGroupJPanelLayout.createSequentialGroup()
                .addComponent(card1JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(card2JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(card3JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(card4JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        cardGroupJPanelLayout.setVerticalGroup(
            cardGroupJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cardGroupJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(card1JLabel)
                .addComponent(card4JLabel)
                .addComponent(card2JLabel)
                .addComponent(card3JLabel))
        );

        dataJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        dataJLabel.setForeground(new java.awt.Color(255, 51, 51));
        dataJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        dataJLabel.setText("Number Of Picks:");
        dataJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        drawsJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        drawsJLabel.setForeground(new java.awt.Color(255, 51, 51));
        drawsJLabel.setText("0");
        drawsJLabel.setToolTipText("Number of picks");
        drawsJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        controlsJPanel.setBackground(new java.awt.Color(0, 0, 0));
        controlsJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Controls:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(251, 0, 51))); // NOI18N

        goJButton.setBackground(new java.awt.Color(255, 0, 51));
        goJButton.setMnemonic('G');
        goJButton.setText("Go");
        goJButton.setToolTipText("Start Game");
        goJButton.setEnabled(false);
        goJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goJButtonActionPerformed(evt);
            }
        });

        printJButton.setBackground(new java.awt.Color(255, 0, 51));
        printJButton.setMnemonic('P');
        printJButton.setText("Print");
        printJButton.setToolTipText("Prints entrie window");
        printJButton.setEnabled(false);
        printJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                printJButtonActionPerformed(evt);
            }
        });

        saveJButton.setBackground(new java.awt.Color(255, 0, 51));
        saveJButton.setMnemonic('S');
        saveJButton.setText("Save");
        saveJButton.setToolTipText("Saves stats to player's information");
        saveJButton.setEnabled(false);
        saveJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveJButtonActionPerformed(evt);
            }
        });

        homeJButton.setBackground(new java.awt.Color(255, 0, 51));
        homeJButton.setMnemonic('Q');
        homeJButton.setText("Quit");
        homeJButton.setToolTipText("Closes the form");
        homeJButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                homeJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlsJPanelLayout = new javax.swing.GroupLayout(controlsJPanel);
        controlsJPanel.setLayout(controlsJPanelLayout);
        controlsJPanelLayout.setHorizontalGroup(
            controlsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsJPanelLayout.createSequentialGroup()
                .addComponent(goJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(printJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(homeJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        controlsJPanelLayout.setVerticalGroup(
            controlsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(goJButton)
                .addComponent(printJButton)
                .addComponent(saveJButton)
                .addComponent(homeJButton))
        );

        playerJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        playerJLabel.setForeground(new java.awt.Color(255, 51, 51));
        playerJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        playerJLabel.setText("Player:");
        playerJLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        playersJComboBox.setToolTipText("Selected Player");
        playersJComboBox.setActionCommand("comboBoxDropped");
        playersJComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                playersJComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bgJPanelLayout = new javax.swing.GroupLayout(bgJPanel);
        bgJPanel.setLayout(bgJPanelLayout);
        bgJPanelLayout.setHorizontalGroup(
            bgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(controlsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bgJPanelLayout.createSequentialGroup()
                        .addComponent(cardGroupJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bgJPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(dataJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drawsJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playersJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        bgJPanelLayout.setVerticalGroup(
            bgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardGroupJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataJLabel)
                    .addComponent(drawsJLabel)
                    .addComponent(playerJLabel)
                    .addComponent(playersJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainJMenuBar.setToolTipText("Additional options");

        fileJMenu.setText("File");

        playerJMenuItem.setMnemonic('A');
        playerJMenuItem.setText("Add New Player");
        playerJMenuItem.setToolTipText("Adds a new player");
        playerJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                playerJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(playerJMenuItem);

        saveJMenuItem.setMnemonic('S');
        saveJMenuItem.setText("Save");
        saveJMenuItem.setToolTipText("Saves the stats to the player's file");
        saveJMenuItem.setEnabled(false);
        saveJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(saveJMenuItem);

        printJMenuItem.setMnemonic('P');
        printJMenuItem.setText("Print");
        printJMenuItem.setToolTipText("Prints the winning cards");
        printJMenuItem.setEnabled(false);
        printJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);
        fileJMenu.add(fileJSeparator);

        quitJMenuItem.setMnemonic('Q');
        quitJMenuItem.setText("Quit");
        quitJMenuItem.setToolTipText("Closes the form");
        quitJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                quitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(quitJMenuItem);

        mainJMenuBar.add(fileJMenu);

        actionsJMenu.setText("Actions");

        goJMenuItem.setMnemonic('G');
        goJMenuItem.setText("Go");
        goJMenuItem.setToolTipText("Starts the game");
        goJMenuItem.setEnabled(false);
        goJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                goJMenuItemActionPerformed(evt);
            }
        });
        actionsJMenu.add(goJMenuItem);
        actionsJMenu.add(actions_topJSeparator);

        logJMenuItem.setMnemonic('L');
        logJMenuItem.setText("View Log");
        logJMenuItem.setToolTipText("Shows the log of games");
        logJMenuItem.setEnabled(false);
        logJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                logJMenuItemActionPerformed(evt);
            }
        });
        actionsJMenu.add(logJMenuItem);

        statsJMenuItem.setMnemonic('t');
        statsJMenuItem.setText("See Stats");
        statsJMenuItem.setToolTipText("View player stats");
        statsJMenuItem.setEnabled(false);
        statsJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                statsJMenuItemActionPerformed(evt);
            }
        });
        actionsJMenu.add(statsJMenuItem);

        printStatsJMenuItem.setMnemonic('r');
        printStatsJMenuItem.setText("Print Stats");
        printStatsJMenuItem.setToolTipText("Print Player stats");
        printStatsJMenuItem.setEnabled(false);
        printStatsJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                printStatsJMenuItemActionPerformed(evt);
            }
        });
        actionsJMenu.add(printStatsJMenuItem);
        actionsJMenu.add(actions_bottomJSeparator);

        clearJMenuItem.setMnemonic('C');
        clearJMenuItem.setText("Clear Stats");
        clearJMenuItem.setToolTipText("Clears all player stats and resets form");
        clearJMenuItem.setEnabled(false);
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearJMenuItemActionPerformed(evt);
            }
        });
        actionsJMenu.add(clearJMenuItem);

        mainJMenuBar.add(actionsJMenu);

        settingsJMenu.setText("Settings");

        modeJbuttonGroup.add(keepJRadioButtonMenuItem);
        keepJRadioButtonMenuItem.setMnemonic('K');
        keepJRadioButtonMenuItem.setSelected(true);
        keepJRadioButtonMenuItem.setText("Keep Card");
        keepJRadioButtonMenuItem.setToolTipText("Shuffles invalid cards back into deck");
        settingsJMenu.add(keepJRadioButtonMenuItem);

        modeJbuttonGroup.add(removeJRadioButtonMenuItem);
        removeJRadioButtonMenuItem.setMnemonic('R');
        removeJRadioButtonMenuItem.setText("Remove Card");
        removeJRadioButtonMenuItem.setToolTipText("Removes invalid cards from deck (changes stats)");
        settingsJMenu.add(removeJRadioButtonMenuItem);

        mainJMenuBar.add(settingsJMenu);

        helpJMenu.setText("Help");

        instructionsJMenuItem.setMnemonic('I');
        instructionsJMenuItem.setText("Instructions");
        instructionsJMenuItem.setToolTipText("Shows instructions for playing and calculating in game");
        instructionsJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                instructionsJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(instructionsJMenuItem);

        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Shows information about this program");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        mainJMenuBar.add(helpJMenu);

        setJMenuBar(mainJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: homeJButtonActionPerformed
     * @Title: homeJButtonActionPerformed
     *
     * @Description: Event for when home button is pressed; closes program
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: n/a
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void homeJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_homeJButtonActionPerformed
    {//GEN-HEADEREND:event_homeJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_homeJButtonActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: goJButtonActionPerformed
     * @Title: goJButtonActionPerformed
     *
     * @Description: Event for when go button is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: go(); actually performs actions of button pressed
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goJButtonActionPerformed
    {//GEN-HEADEREND:event_goJButtonActionPerformed
        go();
    }//GEN-LAST:event_goJButtonActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: instructionsJMenuItemActionPerformed
     * @Title: instructionsJMenuItemActionPerformed
     *
     * @Description: Event for when instructions menu item is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: DataManager.infoPop(); calls the JOptionPane with information
     * from the Instructions file
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void instructionsJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_instructionsJMenuItemActionPerformed
    {//GEN-HEADEREND:event_instructionsJMenuItemActionPerformed
        DataManager.infoPop(instructionsJMenuItem.getText());
    }//GEN-LAST:event_instructionsJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: aboutJMenuItemActionPerformed
     * @Title: aboutJMenuItemActionPerformed
     *
     * @Description: Event for when about menu item is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: DataManager.infoPop(); calls the JOptionPane with information
     * from the About file
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutJMenuItemActionPerformed
        DataManager.infoPop(aboutJMenuItem.getText());
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: saveJButtonActionPerformed
     * @Title: saveJButtonActionPerformed
     *
     * @Description: Event for when about save button is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: save(); contains code for saving the function
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveJButtonActionPerformed
    {//GEN-HEADEREND:event_saveJButtonActionPerformed
        save();
    }//GEN-LAST:event_saveJButtonActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: aboutJMenuItemActionPerformed
     * @Title: aboutJMenuItemActionPerformed
     *
     * @Description: Event for when stats menu item is pressed.
     *
     * @Input:
     * <br>playersJComboBox; selects the player
     * <br>removeJRadioButtonMenuItem; determines game mode
     *
     * @Output: JOptionPane; shows the players stats in a popup window
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: Player.getStats(); pulls the required information from the Player
     * class
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void statsJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_statsJMenuItemActionPerformed
    {//GEN-HEADEREND:event_statsJMenuItemActionPerformed
        JOptionPane.showMessageDialog(
                null, player.getStats(playersJComboBox.getSelectedIndex(), removeJRadioButtonMenuItem.isSelected()),
                "Logs", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_statsJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: printJButtonActionPerformed
     * @Title: printJButtonActionPerformed
     *
     * @Description: Event for when print button is pressed.
     *
     * @Input:n/a
     * @Output: print
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: PrintUtilities.printComponent(); prints the entire window
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJButtonActionPerformed
    {//GEN-HEADEREND:event_printJButtonActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printJButtonActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: printJMenuItemActionPerformed
     * @Title: printJMenuItemActionPerformed
     *
     * @Description: Event for when print menu item is pressed.
     *
     * @Input: n/a
     * @Output: print
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: PrintUtilities.printComponent(); prints only the winning cards
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printJMenuItemActionPerformed
    {//GEN-HEADEREND:event_printJMenuItemActionPerformed
        PrintUtilities.printComponent(cardGroupJPanel);
    }//GEN-LAST:event_printJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: clearJMenuItemActionPerformed
     * @Title: clearJMenuItemActionPerformed
     *
     * @Description: Event for when clear menu item is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: DataManager.clear(); deletes the corresponding stat file for a
     * player and game mode
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearJMenuItemActionPerformed
    {//GEN-HEADEREND:event_clearJMenuItemActionPerformed
        DataManager.clear(removeJRadioButtonMenuItem.isSelected(), playersJComboBox.getSelectedItem().toString());
        player = new Player();
        String defaultImage = "src//CardImages//b2fv.png";
        card1JLabel.setIcon(new ImageIcon(defaultImage));
        card2JLabel.setIcon(new ImageIcon(defaultImage));
        card3JLabel.setIcon(new ImageIcon(defaultImage));
        card4JLabel.setIcon(new ImageIcon(defaultImage));

        drawsJLabel.setText(Integer.toString(0));

        saveJButton.setEnabled(false);
        saveJMenuItem.setEnabled(false);

        printJButton.setEnabled(false);
        printJMenuItem.setEnabled(false);

    }//GEN-LAST:event_clearJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: logJMenuItemActionPerformed
     * @Title: logJMenuItemActionPerformed
     *
     * @Description: Event for when logs menu item is pressed.
     *
     * @Input:
     * <br>playersJComboBox; selects the player
     * <br>removeJRadioButtonMenuItem; determines game mode
     *
     * @Output: JOptionPane; shows the players logs in a popup window
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: Player.getLogs(); pulls the required information from the Player
     * class
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void logJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_logJMenuItemActionPerformed
    {//GEN-HEADEREND:event_logJMenuItemActionPerformed
        JOptionPane.showMessageDialog(
                null, player.getLogs(playersJComboBox.getSelectedIndex(), removeJRadioButtonMenuItem.isSelected()),
                "Logs", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_logJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: goJMenuItemActionPerformed
     * @Title: goJMenuItemActionPerformed
     *
     * @Description: Event for when go button is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: go(); actually performs actions of button pressed
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void goJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goJMenuItemActionPerformed
    {//GEN-HEADEREND:event_goJMenuItemActionPerformed
        go();
    }//GEN-LAST:event_goJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: printStatsJMenuItemActionPerformed
     * @Title: printStatsJMenuItemActionPerformed
     *
     * @Description: Prints the player's stats from a new form
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: PrintStatsGUI(); calls the constructor for the print gui
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void printStatsJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printStatsJMenuItemActionPerformed
    {//GEN-HEADEREND:event_printStatsJMenuItemActionPerformed
        new PrintStatsGUI(playersJComboBox.getSelectedIndex(), removeJRadioButtonMenuItem.isSelected());
    }//GEN-LAST:event_printStatsJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: playerJMenuItemActionPerformed
     * @Title: playerJMenuItemActionPerformed
     *
     * @Description: Opens the form to add a new player
     *
     * @Input: n/a
     * @Output: new form
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: InsertPlayerGUI; the new form
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void playerJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_playerJMenuItemActionPerformed
    {//GEN-HEADEREND:event_playerJMenuItemActionPerformed
        new InsertPlayerGUI(this).setVisible(true);
    }//GEN-LAST:event_playerJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: saveJMenuItemActionPerformed
     * @Title: saveJMenuItemActionPerformed
     *
     * @Description: Event for when about save menut item is pressed.
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: save(); contains code for saving the function
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void saveJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveJMenuItemActionPerformed
    {//GEN-HEADEREND:event_saveJMenuItemActionPerformed
        save();
    }//GEN-LAST:event_saveJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: playersJComboBoxActionPerformed
     * @Title: playersJComboBoxActionPerformed
     *
     * @Description: OResets the form if player is changed
     *
     * @Input: n/a
     * @Output: n/s
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: n/a
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void playersJComboBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_playersJComboBoxActionPerformed
    {//GEN-HEADEREND:event_playersJComboBoxActionPerformed
        //sets the labels to their default images and text
        String defaultImage = "src//CardImages//b2fv.png";
        card1JLabel.setIcon(new ImageIcon(defaultImage));
        card2JLabel.setIcon(new ImageIcon(defaultImage));
        card3JLabel.setIcon(new ImageIcon(defaultImage));
        card4JLabel.setIcon(new ImageIcon(defaultImage));
        drawsJLabel.setText(Integer.toString(0));

        //Disables unecessary button
        saveJButton.setEnabled(false);
        saveJMenuItem.setEnabled(false);
        printJButton.setEnabled(false);
        printJMenuItem.setEnabled(false);
    }//GEN-LAST:event_playersJComboBoxActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: quitJMenuItemActionPerformed
     * @Title: quitJMenuItemActionPerformed
     *
     * @Description: Event for when quit menu option is pressed; closes program
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: n/a
     * @Calls: n/a
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    private void quitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_quitJMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitJMenuItemActionPerformed

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: save
     * @Title: save
     *
     * @Description: Saves the current data through the DataManager
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: save button and menu item
     * @Calls: DataManager.save(); places data in a text file 
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public void save()
    {
        //Calls method-only DataManager to add new stats to txt file
        DataManager.save(drawsJLabel.getText(), removeJRadioButtonMenuItem.isSelected(),
                playersJComboBox.getSelectedItem().toString());

        //disables the unecessary buttons
        saveJButton.setEnabled(false);
        saveJMenuItem.setEnabled(false);

        //reloads the player class with new data
        player = new Player();
    }

     /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: go
     * @Title: go
     *
     * @Description: runs the logic of the program and locks the data into visual holders
     *
     * @Input: n/a
     * @Output: n/a
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: save button and menu item
     * @Calls: DeckOfCards.getSet(); places data in a text file 
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 3/5/2016
     * @version 1.0
     * @HistoryLog: 3/5/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public void go()
    {
        final String FILEPATH = "src//CardImages//";
        final String EXTENSION = ".png";

        //Sets all static values back to defaults
        DeckOfCards.reset();

        //Grabs the string array of cards, and passes it into a holder for display
        String cards[] = DeckOfCards.getSet(removeJRadioButtonMenuItem.isSelected());

        //displays the image of the selected cards in the proper label
        card1JLabel.setIcon(new ImageIcon(FILEPATH + cards[0] + EXTENSION));
        card2JLabel.setIcon(new ImageIcon(FILEPATH + cards[1] + EXTENSION));
        card3JLabel.setIcon(new ImageIcon(FILEPATH + cards[2] + EXTENSION));
        card4JLabel.setIcon(new ImageIcon(FILEPATH + cards[3] + EXTENSION));

        //Diplays the number of cards drawn
        drawsJLabel.setText(Integer.toString(DeckOfCards.draws));

        //Enables Appropriate buttons
        saveJButton.setEnabled(true);
        saveJMenuItem.setEnabled(true);
        printJMenuItem.setEnabled(true);
        printJButton.setEnabled(true);
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     *
     * @Class: PickCardsGUI
     * @File: PickCardsGUI.java
     *
     * @author: Kevin Manning
     *
     * @Function: loadSpinner()
     * @Title: Load Spinner
     *
     * @Description: Fills the spinner with the data from the players file
     *
     * @Input: Players.txt - file of player names
     * @Output: playersJComboBox - Fills with data from file
     *
     * @Parameters: n/a
     * @Return: n/a
     *
     * @CalledBy: menuClear, default constructor
     * @Calls: n/a
     *
     * @Environment: PC, Windows 10, jdk8.0, NetBeans 8.1
     * @Date: 2/18/2016
     * @version 1.0
     * @HistoryLog: 2/18/16 - Built function and called methods
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */
    public void loadSpinner()
    {
        Player players = new Player();
        //Player players = new Player();

        //Clears JComboBox to prevent rewriting
        playersJComboBox.removeAllItems();
        if (Player.players != null)
        {

            // Add player name to JComboBox
            for (String val : players.players)
            {
                playersJComboBox.addItem(val);
            }

            //enable options!
            goJButton.setEnabled(true);
            goJMenuItem.setEnabled(true);
            logJMenuItem.setEnabled(true);
            statsJMenuItem.setEnabled(true);
            printStatsJMenuItem.setEnabled(true);
            clearJMenuItem.setEnabled(true);
        } else
        {
            //if no players are in the file, loads the "new player" window
            new InsertPlayerGUI(this).setVisible(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(PickCardsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(PickCardsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(PickCardsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(PickCardsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new PickCardsGUI().setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JMenu actionsJMenu;
    private javax.swing.JPopupMenu.Separator actions_bottomJSeparator;
    private javax.swing.JPopupMenu.Separator actions_topJSeparator;
    private javax.swing.JPanel bgJPanel;
    private javax.swing.JLabel card1JLabel;
    private javax.swing.JLabel card2JLabel;
    private javax.swing.JLabel card3JLabel;
    private javax.swing.JLabel card4JLabel;
    private javax.swing.JPanel cardGroupJPanel;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JPanel controlsJPanel;
    private javax.swing.JLabel dataJLabel;
    private javax.swing.JLabel drawsJLabel;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPopupMenu.Separator fileJSeparator;
    private javax.swing.JButton goJButton;
    private javax.swing.JMenuItem goJMenuItem;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JButton homeJButton;
    private javax.swing.JMenuItem instructionsJMenuItem;
    private javax.swing.JRadioButtonMenuItem keepJRadioButtonMenuItem;
    private javax.swing.JMenuItem logJMenuItem;
    private javax.swing.JMenuBar mainJMenuBar;
    private javax.swing.ButtonGroup modeJbuttonGroup;
    private javax.swing.JLabel playerJLabel;
    private javax.swing.JMenuItem playerJMenuItem;
    private javax.swing.JComboBox<String> playersJComboBox;
    private javax.swing.JButton printJButton;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JMenuItem printStatsJMenuItem;
    private javax.swing.JMenuItem quitJMenuItem;
    private javax.swing.JRadioButtonMenuItem removeJRadioButtonMenuItem;
    private javax.swing.JButton saveJButton;
    private javax.swing.JMenuItem saveJMenuItem;
    private javax.swing.JMenu settingsJMenu;
    private javax.swing.JMenuItem statsJMenuItem;
    // End of variables declaration//GEN-END:variables
}
